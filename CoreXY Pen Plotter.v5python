{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nl_motor = Motor(Ports.PORT10, GearSetting.RATIO_36_1, False)\nr_motor = Motor(Ports.PORT20, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ntarget_speed = 50\n\n#Transformation Matrix Variables\nl_dir = [.5,-.5]\nr_dir = [.5,.5]\n\nt_matrix = [[0,0],[0,0]]\n\n#Distance Conversion Variables\nmm_to_deg = (35/130) * (1/20) * (84/36) * 360\n\n#Limits\nx_limit = [0, 260-50]\ny_limit = [0, 280-50]\n\ndef calculate_matrix():\n    global t_matrix\n    t_matrix = [l_dir[0], r_dir[0]], [l_dir[1], r_dir[1]]\n\n    #invert Matrix\n    det = t_matrix[0][0]*t_matrix[1][1] - t_matrix[0][1]*t_matrix[1][0]\n    temp = t_matrix[0][0]\n    t_matrix[0][0] = t_matrix[1][1]\n    t_matrix[1][1] = temp\n    t_matrix[1][0] *= -1\n    t_matrix[0][1] *= -1\n\n    t_matrix[0][0] /= det\n    t_matrix[0][1] /= det\n    t_matrix[1][0] /= det\n    t_matrix[1][1] /= det\n\ndef transform_coordinate(coor):\n    transformed = [0, 0]\n\n    for i in range(2):\n        s = 0\n        for j in range(2):\n            s += t_matrix[i][j] * coor[j]\n        transformed[i] = s\n\n    return transformed\n\ndef move_in_dir(dire, speed):\n    d = transform_coordinate(dire)\n\n    #Correct speed\n    hypt = math.sqrt(d[0]**2 + d[1]**2)\n    d[0] *= speed/hypt\n    d[1] *= speed/hypt\n\n    #smooth change in velosity\n    change_thresh = 200\n\n    d_l = d[0] - l_motor.velocity(PERCENT)\n    d_r = d[1] - r_motor.velocity(PERCENT)\n    max_change = max(d_l, d_r)\n    fraction = min(change_thresh, max_change) / max_change\n\n    d[0] = l_motor.velocity(PERCENT) + d_l * fraction\n    d[1] = r_motor.velocity(PERCENT) + d_r * fraction\n\n    l_motor.set_velocity(d[0])\n    r_motor.set_velocity(d[1])\n\n\ndef stop_motors():\n    l_motor.set_velocity(0, PERCENT)\n    r_motor.set_velocity(0, PERCENT)\n\ndef auto_home():\n    #Set Low Motor Torque in order to prevent chain \n    #from breaking if sensorless homing Fails \n    l_motor.set_max_torque(5, PERCENT)\n    r_motor.set_max_torque(5, PERCENT)\n\n    #Home Vertical\n    move_in_dir([0,-1], 50)\n    wait(0.25, SECONDS)\n    while (not check_spike_in_torque(.2)):\n        wait(0.1, SECONDS)\n\n    move_in_dir([0,1], 100)\n    wait(0.5, SECONDS)\n    stop_motors()\n    \n    wait(1, SECONDS)\n\n    #Home Horizontal\n    move_in_dir([-1,0], 50)\n    wait(0.25, SECONDS)\n    while (not check_spike_in_torque(.2)):\n        wait(0.1, SECONDS)\n\n    move_in_dir([1,0], 100)\n    wait(0.6, SECONDS)\n    stop_motors()\n    \n\n    l_motor.set_position(0, DEGREES)\n    r_motor.set_position(0, DEGREES)\n\n    #Set Motor torque back to max after Homing\n\ndef check_spike_in_torque(threshold):\n    torq = max(r_motor.torque(TorqueUnits.NM), l_motor.torque(TorqueUnits.NM))\n\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(torq)\n    brain.screen.set_cursor(2, 1)\n    brain.screen.print(torq > threshold)\n\n    return torq > threshold\n\ndef current_pos():\n    pos = [0, 0]\n    l_dist = l_motor.position(DEGREES)\n    r_dist = r_motor.position(DEGREES)\n    for i in range(2):\n        pos[i] = l_dist * l_dir[i] + r_dist * r_dir[i]\n        pos[i] /= mm_to_deg\n    return pos\n\ndef move_to_pos(point):\n    target = [point[0], point[1]]\n\n    #Keep Target within bounds\n    target[0] = min(max(target[0],x_limit[0]),x_limit[1])\n    target[1] = min(max(target[1],y_limit[0]),y_limit[1])\n\n    #Calculate the target motor position\n    cvt_target = transform_coordinate(target)\n    for i in range(2):\n        cvt_target[i] *= mm_to_deg\n    \n    #calculate the target direction based on current position \n    cur_pos = current_pos()\n    direction = [target[0] - cur_pos[0], target[1] - cur_pos[1]]\n\n    move_in_dir(direction, 50)\n    l_motor.spin_to_position(cvt_target[0], DEGREES, wait=False)\n    r_motor.spin_to_position(cvt_target[1], DEGREES, wait=False)\n    #move_in_dir(target, 50)\n\n    #wait until target reached\n    while abs(l_motor.position(DEGREES)-cvt_target[0])>5 and abs(r_motor.position(DEGREES)-cvt_target[1])>5:\n        wait(0.05, SECONDS)\n\n    #\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(cvt_target[0], cvt_target[1])\n\ndef move_to_pos_nostop(point, speed):\n    target = [point[0], point[1]]\n\n    #limit speed to within 0 and 100\n    speed = max(0, min(100, speed))\n\n    #Keep Target within bounds\n    target[0] = min(max(target[0],x_limit[0]),x_limit[1])\n    target[1] = min(max(target[1],y_limit[0]),y_limit[1])\n\n    #Calculate the target motor position\n    cvt_target = transform_coordinate(target)\n    for i in range(2):\n        cvt_target[i] *= mm_to_deg\n    \n    \n    #wait until target reached\n    thresh = 10\n    while abs(l_motor.position(DEGREES)-cvt_target[0])>thresh and abs(r_motor.position(DEGREES)-cvt_target[1])>thresh:\n        #calculate the target direction based on current position \n        cur_pos = current_pos()\n        direction = [target[0] - cur_pos[0], target[1] - cur_pos[1]]\n\n        move_in_dir(direction, speed)\n\ndef brain_print(text):\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n    brain.screen.print(text)\n\n#Define Shapes\n#define square drawing\ndef center(target):\n    return [target[0] + x_limit[1]/2, target[1] + y_limit[1]/2]\n\n\ncontours = [[(115.85365853658537, 187.9588839941263), (117.8048780487805, 186.19676945668135), (118.78048780487805, 183.55359765051395), (119.51219512195121, 180.61674008810573), (120.0, 177.6798825256975), (120.48780487804878, 175.0367107195301), (120.48780487804878, 155.06607929515417), (121.95121951219512, 152.7165932452276), (123.17073170731707, 150.36710719530103), (124.39024390243902, 148.01762114537445), (125.60975609756098, 145.66813509544787), (126.58536585365854, 143.31864904552128), (127.8048780487805, 140.9691629955947), (128.78048780487805, 138.61967694566812), (129.7560975609756, 135.97650513950072), (130.7317073170732, 133.33333333333334), (131.7073170731707, 130.98384728340676), (132.6829268292683, 128.63436123348018), (133.90243902439025, 125.99118942731278), (134.8780487804878, 123.6417033773862), (135.85365853658539, 121.29221732745961), (136.8292682926829, 118.94273127753304), (137.8048780487805, 116.59324522760646), (139.02439024390245, 114.24375917767988), (140.0, 111.89427312775331), (140.97560975609755, 109.54478707782673), (141.9512195121951, 107.19530102790014), (142.9268292682927, 104.84581497797357), (143.90243902439025, 102.49632892804699), (144.8780487804878, 100.14684287812041), (145.609756097561, 97.20998531571219), (146.58536585365852, 94.56681350954479), (147.3170731707317, 91.92364170337738), (148.0487804878049, 89.28046989721), (148.78048780487805, 86.6372980910426), (149.2682926829268, 83.70044052863437), (149.7560975609756, 81.05726872246697), (150.2439024390244, 78.12041116005875), (150.7317073170732, 73.42143906020557), (150.97560975609755, 66.9603524229075), (150.4878048780488, 64.31718061674007), (150.0, 61.67400881057267), (149.2682926829268, 59.03083700440527), (148.29268292682926, 56.68135095447872), (146.34146341463415, 53.74449339207047), (143.65853658536585, 54.331864904552134), (143.41463414634148, 57.562408223201174), (142.9268292682927, 60.205580029368576), (142.6829268292683, 62.84875183553598), (142.6829268292683, 65.49192364170338), (142.4390243902439, 68.4287812041116), (142.1951219512195, 71.36563876651982), (141.9512195121951, 74.30249632892804), (141.70731707317074, 76.94566813509545), (141.46341463414635, 79.88252569750367), (140.97560975609755, 82.52569750367107), (140.7317073170732, 86.93098384728341), (140.2439024390244, 90.7488986784141), (139.7560975609756, 93.97944199706313), (139.26829268292684, 96.91629955947137), (138.53658536585365, 100.14684287812041), (137.5609756097561, 102.49632892804699), (137.5609756097561, 98.67841409691628), (138.0487804878049, 94.86049926578562), (138.53658536585365, 91.04258443465491), (139.02439024390245, 87.22466960352422), (139.5121951219512, 83.40675477239354), (140.0, 80.76358296622614), (140.2439024390244, 76.94566813509545), (140.4878048780488, 74.30249632892804), (140.97560975609755, 71.65932452276064), (140.97560975609755, 69.01615271659324), (141.21951219512195, 66.07929515418502), (141.46341463414635, 62.55506607929516), (141.70731707317074, 57.856093979441994), (141.9512195121951, 41.99706314243758), (141.46341463414635, 39.35389133627018), (141.21951219512195, 36.71071953010278), (140.4878048780488, 33.77386196769456), (139.7560975609756, 31.130690161527156), (138.78048780487805, 28.7812041116006), (137.5609756097561, 26.1380323054332), (136.34146341463415, 23.788546255506617), (134.14634146341461, 20.558002936857577), (130.97560975609758, 17.03377386196769), (129.02439024390245, 15.271659324522773), (127.07317073170732, 13.21585903083701), (101.70731707317073, 12.041116005873732), (100.2439024390244, 14.390602055800287), (98.53658536585365, 12.041116005873732), (74.63414634146342, 12.041116005873732), (72.4390243902439, 14.096916299559467), (69.51219512195121, 17.03377386196769), (66.34146341463415, 20.558002936857577), (63.90243902439025, 23.494860499265798), (62.68292682926827, 25.844346549192352), (61.70731707317074, 28.193832599118934), (60.73170731707319, 30.543318649045517), (60.0, 33.48017621145374), (59.26829268292684, 36.41703377386196), (58.78048780487805, 39.647577092511), (58.292682926829286, 42.2907488986784), (58.292682926829286, 57.268722466960355), (58.536585365853654, 62.26138032305434), (58.78048780487805, 65.7856093979442), (59.024390243902445, 68.72246696035242), (59.26829268292684, 71.65932452276064), (59.756097560975604, 74.30249632892804), (60.0, 78.70778267254038), (60.48780487804879, 82.81938325991189), (60.97560975609758, 86.93098384728341), (61.463414634146346, 90.7488986784141), (61.95121951219514, 94.56681350954479), (62.4390243902439, 98.38472834067548), (62.926829268292664, 102.20264317180616), (61.70731707317074, 99.85315712187959), (61.21951219512195, 97.20998531571219), (60.73170731707319, 94.27312775330397), (60.243902439024396, 91.04258443465491), (59.756097560975604, 87.22466960352422), (59.26829268292684, 84.58149779735682), (59.024390243902445, 79.88252569750367), (58.78048780487805, 77.23935389133626), (58.536585365853654, 74.59618208516888), (58.292682926829286, 71.65932452276064), (58.04878048780489, 68.4287812041116), (57.804878048780495, 65.49192364170338), (57.5609756097561, 62.55506607929516), (57.3170731707317, 59.91189427312776), (56.82926829268294, 57.268722466960355), (56.585365853658544, 54.331864904552134), (54.14634146341464, 53.74449339207047), (52.4390243902439, 55.80029368575623), (51.21951219512195, 58.14977973568284), (50.48780487804879, 60.792951541850215), (49.756097560975604, 64.31718061674007), (49.26829268292684, 66.9603524229075), (49.26829268292684, 73.12775330396475), (49.51219512195121, 76.06461086637297), (50.0, 79.29515418502203), (50.48780487804879, 82.23201174743025), (51.21951219512195, 84.87518355359765), (51.70731707317074, 87.51835535976504), (52.4390243902439, 90.16152716593244), (53.17073170731709, 92.80469897209986), (53.90243902439025, 95.44787077826726), (54.8780487804878, 98.09104258443466), (55.60975609756099, 100.73421439060205), (56.585365853658544, 103.08370044052863), (57.5609756097561, 105.43318649045521), (58.536585365853654, 107.7826725403818), (59.51219512195124, 110.13215859030836), (60.48780487804879, 112.48164464023495), (61.70731707317074, 114.83113069016153), (62.68292682926827, 117.18061674008811), (63.65853658536585, 119.53010279001468), (64.6341463414634, 121.87958883994126), (65.60975609756096, 124.22907488986785), (66.82926829268291, 126.57856093979441), (67.8048780487805, 128.928046989721), (68.78048780487805, 131.27753303964758), (69.7560975609756, 133.62701908957416), (70.73170731707316, 136.27019089574156), (71.70731707317074, 138.91336270190897), (72.92682926829268, 141.55653450807637), (74.14634146341463, 144.19970631424377), (75.1219512195122, 146.54919236417032), (76.34146341463415, 148.89867841409693), (77.5609756097561, 151.2481644640235), (78.78048780487805, 153.59765051395007), (79.75609756097562, 175.0367107195301), (80.2439024390244, 177.6798825256975), (80.48780487804879, 180.3230543318649), (81.21951219512195, 183.25991189427313), (82.43902439024392, 185.90308370044053), (84.39024390243904, 187.9588839941263), (86.82926829268294, 187.37151248164463), (89.02439024390243, 185.02202643171807), (89.99999999999999, 182.6725403817915), (90.48780487804878, 179.44199706314242), (90.97560975609755, 176.79882525697502), (90.97560975609755, 168.28193832599118), (90.73170731707316, 165.34508076358298), (90.24390243902438, 162.70190895741555), (89.99999999999999, 159.1776798825257), (93.65853658536585, 159.4713656387665), (96.09756097560975, 160.05873715124818), (104.14634146341464, 160.05873715124818), (106.58536585365853, 159.4713656387665), (109.02439024390243, 158.88399412628488), (110.0, 162.70190895741555), (109.51219512195122, 165.34508076358298), (109.51219512195122, 168.28193832599118), (109.26829268292683, 176.79882525697502), (109.7560975609756, 179.44199706314242), (110.24390243902438, 182.37885462555067), (111.21951219512195, 184.72834067547723), (112.92682926829268, 187.0778267254038), (115.85365853658537, 187.9588839941263)], [(102.6829268292683, 117.76798825256975), (97.07317073170731, 118.06167400881057), (94.39024390243902, 117.76798825256975), (91.46341463414633, 117.18061674008811), (89.02439024390243, 116.29955947136564), (86.34146341463416, 115.41850220264317), (83.90243902439025, 114.24375917767988), (81.70731707317074, 112.77533039647577), (79.26829268292683, 111.01321585903084), (76.82926829268293, 108.95741556534509), (71.46341463414635, 103.08370044052863), (69.7560975609756, 100.44052863436124), (68.53658536585365, 98.09104258443466), (67.3170731707317, 95.74155653450806), (66.34146341463415, 93.3920704845815), (65.36585365853657, 91.04258443465491), (64.39024390243901, 88.39941262848751), (63.65853658536585, 85.46255506607929), (62.926829268292664, 82.81938325991189), (62.4390243902439, 79.29515418502203), (61.95121951219514, 75.77092511013215), (61.70731707317074, 73.12775330396475), (61.463414634146346, 62.55506607929516), (61.95121951219514, 58.73715124816445), (62.4390243902439, 56.09397944199705), (63.17073170731706, 52.86343612334801), (63.90243902439025, 50.22026431718061), (64.8780487804878, 47.577092511013205), (65.85365853658536, 44.933920704845804), (66.82926829268291, 42.58443465491922), (67.8048780487805, 40.23494860499267), (69.26829268292681, 37.591776798825265), (70.97560975609755, 34.654919236417044), (73.17073170731707, 31.424375917767975), (76.58536585365854, 27.019089574155657), (79.02439024390245, 24.669603524229075), (81.46341463414635, 22.61380323054331), (83.65853658536587, 21.145374449339215), (86.09756097560977, 19.67694566813509), (88.53658536585365, 18.502202643171813), (91.21951219512195, 17.621145374449355), (94.39024390243902, 16.74008810572687), (98.04878048780488, 16.15271659324523), (100.73170731707317, 16.15271659324523), (103.65853658536585, 16.44640234948605), (106.09756097560977, 17.03377386196769), (109.02439024390243, 17.914831130690175), (111.46341463414635, 19.08957415565345), (113.90243902439025, 19.97063142437591), (116.34146341463415, 21.439060205580006), (118.53658536585367, 22.90748898678413), (120.73170731707317, 24.375917767988255), (123.17073170731707, 26.725403817914838), (128.2926829268293, 32.30543318649046), (130.2439024390244, 35.24229074889868), (131.46341463414632, 37.591776798825265), (132.6829268292683, 39.94126284875185), (133.90243902439025, 42.2907488986784), (134.8780487804878, 44.933920704845804), (135.85365853658539, 47.577092511013205), (136.58536585365854, 50.22026431718061), (137.0731707317073, 52.86343612334801), (137.5609756097561, 55.50660792951544), (138.0487804878049, 58.73715124816445), (138.53658536585365, 61.38032305433188), (138.53658536585365, 65.49192364170338), (138.53658536585365, 68.13509544787078), (138.53658536585365, 73.42143906020557), (138.0487804878049, 76.06461086637297), (137.8048780487805, 79.29515418502203), (137.3170731707317, 82.23201174743025), (136.58536585365854, 85.16886930983847), (135.85365853658539, 87.81204111600587), (134.8780487804878, 90.45521292217327), (133.90243902439025, 93.09838472834066), (132.6829268292683, 95.74155653450806), (131.7073170731707, 98.09104258443466), (130.0, 100.73421439060205), (124.39024390243902, 108.07635829662262), (122.4390243902439, 109.83847283406755), (120.24390243902438, 111.60058737151249), (118.04878048780488, 113.0690161527166), (115.60975609756098, 114.24375917767988), (113.17073170731707, 115.41850220264317), (110.73170731707317, 116.29955947136564), (108.29268292682926, 117.18061674008811), (105.3658536585366, 117.47430249632893), (102.6829268292683, 117.76798825256975)], [(69.51219512195121, 86.93098384728341), (71.70731707317074, 85.46255506607929), (73.41463414634146, 83.40675477239354), (68.78048780487805, 83.40675477239354), (65.36585365853657, 80.1762114537445), (65.36585365853657, 82.81938325991189), (66.34146341463415, 85.16886930983847), (69.51219512195121, 86.93098384728341)], [(132.1951219512195, 86.93098384728341), (134.390243902439, 84.58149779735682), (135.1219512195122, 80.1762114537445), (132.9268292682927, 82.52569750367107), (128.78048780487805, 83.40675477239354), (129.02439024390245, 86.04992657856094), (132.1951219512195, 86.93098384728341)], [(117.07317073170732, 91.62995594713657), (119.51219512195121, 89.28046989721), (120.24390243902438, 86.6372980910426), (117.31707317073172, 87.51835535976504), (111.70731707317073, 88.39941262848751), (112.92682926829268, 90.7488986784141), (117.07317073170732, 91.62995594713657)], [(81.95121951219512, 92.51101321585904), (84.39024390243904, 91.33627019089575), (86.34146341463416, 88.98678414096916), (82.6829268292683, 88.69309838472834), (80.0, 88.39941262848751), (77.8048780487805, 86.93098384728341), (77.8048780487805, 89.57415565345082), (79.75609756097562, 91.92364170337738), (81.95121951219512, 92.51101321585904)], [(99.02439024390245, 94.56681350954479), (102.6829268292683, 91.33627019089575), (100.2439024390244, 90.7488986784141), (96.34146341463415, 91.04258443465491), (93.65853658536585, 89.86784140969164), (94.8780487804878, 93.68575624082231), (99.02439024390245, 94.56681350954479)], [(78.53658536585367, 104.84581497797357), (80.97560975609757, 103.67107195301027), (83.17073170731707, 101.3215859030837), (78.04878048780488, 101.3215859030837), (75.60975609756098, 99.55947136563876), (73.41463414634146, 97.79735682819384), (73.90243902439025, 100.44052863436124), (74.8780487804878, 102.79001468428781), (76.82926829268293, 104.55212922173274), (78.53658536585367, 104.84581497797357)], [(122.92682926829268, 104.84581497797357), (126.34146341463415, 102.49632892804699), (127.3170731707317, 99.85315712187959), (124.63414634146342, 100.44052863436124), (120.24390243902438, 101.3215859030837), (117.8048780487805, 100.73421439060205), (119.51219512195121, 103.37738619676946), (122.4390243902439, 104.55212922173274), (122.92682926829268, 104.84581497797357)], [(92.4390243902439, 111.01321585903084), (94.8780487804878, 109.83847283406755), (96.58536585365853, 107.7826725403818), (94.14634146341463, 106.90161527165932), (90.97560975609755, 107.19530102790014), (88.29268292682926, 105.43318649045521), (88.29268292682926, 108.07635829662262), (90.24390243902438, 110.4258443465492), (92.4390243902439, 111.01321585903084)], [(107.80487804878048, 111.01321585903084), (111.70731707317073, 107.7826725403818), (112.4390243902439, 105.13950073421438), (110.0, 106.31424375917769), (107.5609756097561, 107.19530102790014), (104.8780487804878, 106.90161527165932), (102.4390243902439, 105.72687224669603), (104.39024390243902, 109.54478707782673), (106.82926829268293, 110.71953010279), (107.80487804878048, 111.01321585903084)], [(102.6829268292683, 142.73127753303964), (98.04878048780488, 143.02496328928046), (95.60975609756098, 142.143906020558), (93.65853658536585, 140.38179148311306), (94.8780487804878, 138.03230543318648), (97.3170731707317, 137.44493392070484), (102.92682926829269, 137.15124816446402), (105.3658536585366, 138.03230543318648), (106.82926829268293, 140.08810572687224), (105.1219512195122, 142.143906020558), (102.6829268292683, 142.73127753303964)], [(86.34146341463416, 145.37444933920705), (83.41463414634147, 145.66813509544787), (80.73170731707317, 143.6123348017621), (80.0, 140.9691629955947), (80.0, 137.7386196769457), (81.46341463414635, 135.09544787077826), (85.3658536585366, 134.2143906020558), (88.04878048780486, 136.27019089574156), (89.02439024390243, 138.91336270190897), (88.78048780487804, 141.55653450807637), (87.07317073170732, 145.08076358296623), (86.34146341463416, 145.37444933920705)], [(84.39024390243904, 142.143906020558), (85.60975609756099, 139.5007342143906), (82.92682926829269, 139.20704845814979), (83.41463414634147, 141.8502202643172), (84.39024390243904, 142.143906020558)], [(118.29268292682927, 145.37444933920705), (115.3658536585366, 145.66813509544787), (112.92682926829268, 143.31864904552128), (112.4390243902439, 138.61967694566812), (114.39024390243902, 135.09544787077826), (118.53658536585367, 134.2143906020558), (120.48780487804878, 135.97650513950072), (121.46341463414633, 141.8502202643172), (119.26829268292683, 145.08076358296623), (118.29268292682927, 145.37444933920705)], [(117.31707317073172, 142.143906020558), (118.53658536585367, 139.5007342143906), (115.85365853658537, 139.5007342143906), (116.82926829268293, 141.8502202643172), (117.31707317073172, 142.143906020558)]]\n\n\n\n#setup\ncalculate_matrix()\n\n#start motors\nl_motor.spin(FORWARD)\nr_motor.spin(FORWARD)\n\n#actions\nauto_home()\nwait(1, SECONDS)\n\n#Follow points\nspeed = 50\n\n# #Move to starting pos and wait\n# move_to_pos(contours[0][0])\n# while not brain.screen.pressing():\n#     wait(0.05, SECONDS)\n\n#draw Shape\nfor contour in contours:\n    for point in contour:\n        move_to_pos_nostop(point, speed)\n\n    wait(1, SECONDS)\n\nstop_motors()\n\nbrain_print(\"Done Moving\")\n\n\n\n\n","textLanguage":"python","robotConfig":[{"port":[10],"name":"l_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[20],"name":"r_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":4,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}